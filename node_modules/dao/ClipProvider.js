/**
 *
 * The ClipProvider class is responsible for parsing GET parameters
 * and returning objects that contain the file path and duration
 * of a sound clip. 
 *
 */

ClipProvider = function() {};

ClipProvider.prototype.parse = function(params)
{
	var clips = [];
	var parts = params['vgs'].split('+');
	if (parts == null || parts.length < 1)
		return;

	var o;
	for (var i = 0; i < parts.length; i++) {
		parts[i] = parts[i].toUpperCase();
		if (this.audioMap[parts[i]] != null) {
			o = Object.create(this.audioMap[parts[i]]); // Object.create to prevent overriding styles
			o['header'] = '[' + parts[i] + ']';
			clips.push(o);
		}
	}

	// Prevent people from being too aggressive.
	// In the future, something funny may happen with this...
	if (clips.length > 66)
		clips = clips.slice(0, 66)
	return this.calculateLayout(clips);
};

/**
 * Returns a set of clips based on what the user requested.
 */
ClipProvider.prototype.getClips = function(req)
{
	var clips = this.parse(req.params);
	return clips;
};

/**
 * Returns a random set of clips.
 *  - a set of 3, 6, 9, 12, 15, 18 or 24
 */
ClipProvider.prototype.getRandomClips = function()
{
	// Convert the audioMap to an array to randomly extract entries.
	var keys = [];
	for (var k in this.audioMap)
		keys.push(k);

	var allowedSets = [3, 6, 9, 12, 15, 18, 24];
	var setCount = allowedSets[Math.floor(Math.random() * (allowedSets.length))];

	var getClip = function() {
		return me.audioMap[clipKey];
	};

	var clips = [];
	var o, clip, clipKey;
	for (var i = 0; i < setCount; i++) {
		clipKey = keys[Math.floor(Math.random() * keys.length)];
		clip = this.audioMap[clipKey];
		o = Object.create(clip); // Object.create to prevent overriding styles
		o['header'] = '[' + clipKey + ']';
		clips.push(o);
	}

	return this.calculateLayout(clips);
};

/**
 * Attach CSS class names to clips based on clip count and index.
 */
ClipProvider.prototype.calculateLayout = function(clips)
{
	var determineClass = function(index, total) {
		if (total == 1)
			return 'grid_12';
		else if (total == 2)
			return 'grid_6';
		else
			return 'grid_4';
	};

	var me = this;
	var determineCalloutClass = function() {
		var rndCallout = Math.floor(Math.random() * (me.calloutStyles.length));
		var rndArrow = Math.floor(Math.random() * (me.calloutArrowStyles.length));
		return [me.calloutStyles[rndCallout], me.calloutArrowStyles[rndArrow]];
	};


	var c = clips.length;
	for (var i = 0; i < clips.length; i++) {
		clips[i]['class'] = determineClass(i, c);
		clips[i]['callout-class'] = determineCalloutClass();
	}

	return clips;
};

/**
 * Get the current list of commands.
 */
ClipProvider.prototype.getSupportedCommands = function()
{
	var keys = [];
	for (var k in this.audioMap)
		keys.push({vgs: k, message: this.audioMap[k].message});

	return keys || [];
};

/**
 * Callout Styles
 */
ClipProvider.prototype.calloutStyles =
[
	'callout-1571B2', 'callout-044C29', 'callout-FF6D1F', 'callout-8C1713'
];
ClipProvider.prototype.calloutArrowStyles = 
[
	'arrow-left', 'arrow-center', 'arrow-right'
];

/**
 * Keys are expected GET parameters, which map to a file with a duration (ms).
 */
ClipProvider.prototype.audioMap =
{
	'VAA': {path: '/audio/VAA', duration: '731', message: 'Attack!'},
	'VAB': {path: '/audio/VAB', duration: '1515', message: 'Attack the enemy base!'},
	'VAC': {path: '/audio/VAC', duration: '1672', message: 'Chase the enemy flag carrier!'},
	'VAD': {path: '/audio/VAD', duration: '1724', message: 'Disrupt the enemy defense!'},
	'VAF': {path: '/audio/VAF', duration: '1202', message: 'Get the enemy flag!'},
	'VAR': {path: '/audio/VAR', duration: '1567', message: 'Reinforce the offense!'},
	'VAW': {path: '/audio/VAW', duration: '1855', message: 'Wait for my singal before attacking.'},
	'VBC': {path: '/audio/VBC', duration: '940', message: 'Our base is clear.'},
	'VBE': {path: '/audio/VBE', duration: '1489', message: 'The enemy is in our base!'},
	'VBR': {path: '/audio/VBR', duration: '1254', message: 'Retake our base!'},
	'VBS': {path: '/audio/VBS', duration: '940', message: 'Secure our base!'},
	'VCA': {path: '/audio/VCA', duration: '627', message: 'Acknowledged.' },
	'VCC': {path: '/audio/VCC', duration: '705', message: 'Completed.' },
	'VCD': {path: '/audio/VCD', duration: '496', message: 'Declined.' },
	'VCW': {path: '/audio/VCW', duration: '862', message: 'What\'s my assignment?'},
	'VDB': {path: '/audio/VDB', duration: '1280', message: 'Defend our base!'},
	'VDC': {path: '/audio/VDC', duration: '1515', message: 'Defend the flag carrier!'},
	'VDE': {path: '/audio/VDE', duration: '1489', message: 'Defend the entrances!'},
	'VDF': {path: '/audio/VDF', duration: '1489', message: 'Defend our flag!'},
	'VDM': {path: '/audio/VDM', duration: '784', message: 'Cover me!'},
	'VDR': {path: '/audio/VDR', duration: '1384', message: 'Reinforce our defense!'},
	'VED': {path: '/audio/VED', duration: '1176', message: 'The enemy is in disarray.'},
	'VFD': {path: '/audio/VFD', duration: '940', message: 'Defend our flag!'},
	'VFF': {path: '/audio/VFF', duration: '914', message: 'I have the flag!'},
	'VFG': {path: '/audio/VFG', duration: '836', message: 'Give me the flag!'},
	'VFR': {path: '/audio/VFR', duration: '1332', message: 'Retrieve our flag!'},
	'VFS': {path: '/audio/VFS', duration: '1149', message: 'Our flag is secure.'},
	'VFT': {path: '/audio/VFT', duration: '1176', message: 'Take the flag from me!'},
	'VGB': {path: '/audio/VGB', duration: '444', message: 'Bye.'},
	'VGCA': {path: '/audio/VGCA', duration: '522', message: 'Awesome!'},
	'VGCG': {path: '/audio/VGCG', duration: '549', message: 'Good game.'},
	'VGCN': {path: '/audio/VGCN', duration: '836', message: 'Nice move!'},
	'VGCS': {path: '/audio/VGCS', duration: '836', message: 'Great shot!'},
	'VGCY': {path: '/audio/VGCY', duration: '810', message: 'You rock!'},
	'VGH': {path: '/audio/VGH', duration: '366', message: 'Hi.'},
	'VGN': {path: '/audio/VGN', duration: '392', message: 'No.'},
	'VGO': {path: '/audio/VGO', duration: '418', message: 'Oops!'},
	'VGQ': {path: '/audio/VGQ', duration: '470', message: 'Quiet.'},
	'VGRA': {path: '/audio/VGRA', duration: '784', message: 'Anytime!'},
	'VGRD': {path: '/audio/VGRD', duration: '627', message: 'I don\'t know.'},
	'VGRT': {path: '/audio/VGRT', duration: '470', message: 'Thanks.'},
	'VGRW': {path: '/audio/VGRW', duration: '392', message: 'Wait.'},
	'VGS': {path: '/audio/VGS', duration: '784', message: 'Shazbot!'},
	'VGTA': {path: '/audio/VGTA', duration: '1019', message: 'Awww, that\'s too bad!'},
	'VGTB': {path: '/audio/VGTB', duration: '1015', message: 'Is that the best you can do?'},
	'VGTG': {path: '/audio/VGTG', duration: '1280', message: 'I am the greatest!'},
	'VGTT': {path: '/audio/VGTT', duration: '1045', message: 'That was graceful!'},
	'VGTW': {path: '/audio/VGTW', duration: '1019', message: 'When will you learn?'},
	'VGW': {path: '/audio/VGW', duration: '549', message: 'Woohoo!'},
	'VGY': {path: '/audio/VGY', duration: '496', message: 'Yes.'},
	'VNC': {path: '/audio/VNC', duration: '1176', message: 'Need covering fire.'},
	'VNE': {path: '/audio/VNE', duration: '1045', message: 'I need an escort!'},
	'VNS': {path: '/audio/VNS', duration: '1019', message: 'I need support!'},
	'VNW': {path: '/audio/VNW', duration: '549', message: 'Where to?'},
	'VSAA': {path: '/audio/VSAA', duration: '731', message: 'I will attack.'},
	'VSAB': {path: '/audio/VSAB', duration: '1411', message: 'I will attack the enemy base.'},
	'VSAF': {path: '/audio/VSAF', duration: '1358', message: 'I\'ll go for the enemy flag.'},
	'VSDB': {path: '/audio/VSDB', duration: '1045', message: 'I\'ll defend our base.'},
	'VSDD': {path: '/audio/VSDD', duration: '731', message: 'I\'ll defend.'},
	'VSDF': {path: '/audio/VSDF', duration: '1176', message: 'I\'ll defend our flag.'},
	'VSRB': {path: '/audio/VSRB', duration: '1017', message: 'I\'ll repair our base.'},
	'VSTC': {path: '/audio/VSTC', duration: '705', message: 'I\'ll cover you.'},
	'VSTD': {path: '/audio/VSTD', duration: '1071', message: 'I\'ll setup defenses.'},
	'VSTO': {path: '/audio/VSTO', duration: '496', message: 'I\'m on it.'},
	'VTA': {path: '/audio/VTA', duration: '836', message: 'Target aquired.'},
	'VTB': {path: '/audio/VTB', duration: '2220', message: 'Target the enemy base, I\'m in position.'},
	'VTD': {path: '/audio/VTD', duration: '1097', message: 'Target destroyed.'},
	'VTF': {path: '/audio/VTF', duration: '1855', message: 'Target the enemy flag, I\'m in position.'},
	'VTM': {path: '/audio/VTM', duration: '1436', message: 'Fire on my target.'},
	'VTN': {path: '/audio/VTN', duration: '1254', message: 'I need a target painted!'},
	'VTW': {path: '/audio/VTW', duration: '1515', message: 'Wait! I\'ll be in range soon.'},
	'VVA': {path: '/audio/VVA', duration: '601', message: 'Anytime.'},
	'VVB': {path: '/audio/VVB', duration: '862', message: 'Is our base secure?'},
	'VVC': {path: '/audio/VVC', duration: '731', message: 'Cease fire!'},
	'VVD': {path: '/audio/VVD', duration: '679', message: 'I don\'t know.'},
	'VVH': {path: '/audio/VVH', duration: '444', message: 'Help!'},
	'VVM': {path: '/audio/VVM', duration: '470', message: 'Move!'},
	'VVN': {path: '/audio/VVN', duration: '418', message: 'No!'},
	'VVS': {path: '/audio/VVS', duration: '601', message: 'Sorry!'},
	'VVT': {path: '/audio/VVT', duration: '496', message: 'Thanks!'},
	'VVW': {path: '/audio/VVW', duration: '444', message: 'Wait!'},
	'VVY': {path: '/audio/VVY', duration: '549', message: 'Yes.'}
};

exports.ClipProvider = ClipProvider;
